diff --git a/CV_WeiWang.pdf b/CV_WeiWang.pdf
new file mode 100644
index 0000000..3166810
Binary files /dev/null and b/CV_WeiWang.pdf differ
diff --git a/_config.yml b/_config.yml
index e964b8b..4ff2a2d 100644
--- a/_config.yml
+++ b/_config.yml
@@ -1,7 +1,7 @@
-permalink: /:categories/:year/:month/:title
+permalink: /:categories/:title
 
-exclude: [".rvmrc", ".rbenv-version", "README.md", "Rakefile", "changelog.md"]
-auto: true
+exclude: [".rvmrc", ".rbenv-version", "README.md", "Rakefile", "changelog.md", "blog/", "notebooks/"]
+auto: false
 pygments: true
 
 
diff --git a/_includes/links.html b/_includes/links.html
index a94ad08..4cd323d 100644
--- a/_includes/links.html
+++ b/_includes/links.html
@@ -1,6 +1,8 @@
 <div class="links">
   <p> <a href="/">home</a>
     | <a href="/teaching/">teaching</a>
+    | <a href="/research/">research</a>
     | <a href="/blog/">blog</a>
+    | <a href="/notebooks/">notebooks</a>
   </p>
 </div>
diff --git a/_layouts/manual.md b/_layouts/manual.md
deleted file mode 100644
index 7733895..0000000
--- a/_layouts/manual.md
+++ /dev/null
@@ -1,50 +0,0 @@
----
-layout: common
----
-<div class="title">The Julia Manual</div>
-{% include links.html %}
-
-<h1>{{ page.title }}</h1>
-
-{{ content }}
-
-<br/><br/>
-
-{% assign this_index = 'none' %}
-{% for i in (0..site.chapters.size) %}
-  {% for this_chapter in site.chapters[i] %}
-    {% if page.title == this_chapter[0] %}
-      {% assign this_index = i %}
-    {% endif %}
-  {% endfor %}
-{% endfor %}
-
-{% capture prev_index %}{{ this_index | minus:1 }}{% endcapture %}
-{% capture next_index %}{{ this_index | plus:1 }}{% endcapture %}
-
-{% if this_index != 'none' %}
-  {% if this_index > 0 %}
-    {% for i in (0..site.chapters.size) %}
-      {% capture istr %}{{i}}{% endcapture %}
-      {% if istr == prev_index %}
-        {% for chapter in site.chapters[i] %}
-          <div class="chaplink prevlink">
-            &laquo; <a href="../{{chapter[1]}}">{{chapter[0]}}</a>
-          </div>
-        {% endfor %}
-      {% endif %}
-    {% endfor %}
-  {% endif %}
-  {% if this_index < site.chapters.size %}
-    {% for i in (0..site.chapters.size) %}
-      {% capture istr %}{{i}}{% endcapture %}
-      {% if istr == next_index %}
-        {% for chapter in site.chapters[i] %}
-          <div class="chaplink nextlink">
-            <a href="../{{chapter[1]}}">{{chapter[0]}}</a> &raquo;
-          </div>
-        {% endfor %}
-      {% endif %}
-    {% endfor %}
-  {% endif %}
-{% endif %}
diff --git a/_layouts/notebook.html b/_layouts/notebook.html
new file mode 100644
index 0000000..bc1eaf9
--- /dev/null
+++ b/_layouts/notebook.html
@@ -0,0 +1,68 @@
+---
+layout: common
+---
+<div class="title">Wang, Wei's Notebooks</div>
+{% include links.html %}
+
+<script type="text/javascript" src="http://cdn.mathjax.org/mathjax/latest/MathJax.js?config=TeX-AMS-MML_HTMLorMML"></script>
+<script type="text/x-mathjax-config"> MathJax.Hub.Config({ TeX: { equationNumbers: {autoNumber: "all"} } });       </script>
+
+<div id="notebookpost">
+  <h1>{{ page.title }}</h1>
+
+  <p class="metadata">
+
+    {% if page.author %}
+    &nbsp;|&nbsp;
+    <span class="author">{{ page.author }}</span>
+    {% elsif page.authors %}
+    &nbsp;|&nbsp;
+    <span class="author">
+      {% for author in page.authors %}
+        {{ author }}{% unless forloop.last %},{% endunless %}
+      {% endfor %}
+    </span>
+    {% endif %}
+  </p>
+
+  {{ content }}
+
+</div>
+
+
+{% if page.trackbacks %}
+<div id="trackbacks">
+  <b>Trackbacks:</b><ul>
+  {% for trackback_hash in page.trackbacks %}
+    {% for trackback in trackback_hash %}
+      <li><a href="{{trackback[1]}}">{{trackback[0]}}</a></li>
+    {% endfor %}
+  {% endfor %}
+  </ul>
+</div>
+{% endif %}
+
+{% assign show_comments = true %}
+{% for category in page.categories %}
+  {% if category == 'drafts' %}
+    {% assign show_comments = false %}
+  {% endif %}
+{% endfor %}
+
+{% if show_comments %}
+<div id="disqus_thread"></div>
+<script type="text/javascript">
+  {% if site.server %}
+  var disqus_developer = 1;
+  {% endif %}
+  (function() {
+    var dsq = document.createElement('script');
+    dsq.async = true;
+    dsq.type = 'text/javascript';
+    dsq.src = 'http://julialang.disqus.com/embed.js';
+    (document.getElementsByTagName('head')[0] ||
+     document.getElementsByTagName('body')[0]).appendChild(dsq);
+  })();
+</script>
+
+{% endif %}
diff --git a/_layouts/research.html b/_layouts/research.html
new file mode 100644
index 0000000..e9a403b
--- /dev/null
+++ b/_layouts/research.html
@@ -0,0 +1,7 @@
+---
+layout: common
+---
+<div class="title">{{ page.title }}</div>
+{% include links.html %}
+
+{{ content }}
diff --git a/_layouts/teaching.html b/_layouts/teaching.html
index 2f588a9..f602090 100644
--- a/_layouts/teaching.html
+++ b/_layouts/teaching.html
@@ -2,5 +2,8 @@
 layout: common
 ---
 <div class="title">{{ page.title }}</div>
-
+<div class="links">
+  <p> <a href="/teaching/index.html">Back to Teaching Index</a>
+  </p>
+</div>
 {{ content }}
diff --git a/blog/_posts/2012-04-12-frequently-used-functions-in-s4.md b/blog/_posts/2012-04-12-frequently-used-functions-in-s4.md
deleted file mode 100644
index a17e8c0..0000000
--- a/blog/_posts/2012-04-12-frequently-used-functions-in-s4.md
+++ /dev/null
@@ -1,32 +0,0 @@
----
-layout: post
-title: "Frequently used functions in S4"
-description: ""
-category: memo
-tags: [S4]
----
-
-[This](http://cran.r-project.org/doc/contrib/Genolini-S4tutorialV0-5en.pdf) is a very helpful introduction/summary of S4 methods.  I often have memory failure when dealing with S4 methods. So I document the basic S4 utilities functions below.  MI is used as an example. This page has {{ page.content | number_of_words }} words.
-
-    {% highlight r linenos %}
-    ## Two most basic definition functions 
-    setClass("missing_data.frame", representation(...), prototype(), contains=FatherClass...)                                    
-    setGeneric(f="mi", def=function(var1, var2, ...) standardGeneric("mi"))                 
-
-    args(mi) # number of arguments for a Generic function                                             
-    setMethod("mi", signature(var1= , var2= ,...), def=function(...) ...)
-
-    ## To see slots names
-    slotNames("mi")
-    getSlots("mi")
-    getClass("mi")
-
-    ## see methods 
-    showMethods(f="mi") # all possible methods for Generic mi
-    showMethods(classess="mi") # all possible methods for class mi
-    getMethods(f="mi", signature(...))
-
-    ## VIRTUAL classes, Registered old-style S3 classes, an example from MI
-    setOldClass("data.frame")
-    setClass("missing_data.frame",  representation(...), contains = "data.frame")
-    {% endhighlight  %}
diff --git a/blog/_posts/2012-04-15-xelatex-and-beautiful-fonts.md b/blog/_posts/2012-04-15-xelatex-and-beautiful-fonts.md
deleted file mode 100644
index b0cad01..0000000
--- a/blog/_posts/2012-04-15-xelatex-and-beautiful-fonts.md
+++ /dev/null
@@ -1,31 +0,0 @@
----
-layout: post
-title: "XeLaTex and beautiful fonts"
-description: ""
-category:
-tags: [XeTex]
----
-
-<!--Some ideas: kpsexpand, add-hook, lambda(), differences between emacs variables commands function, \newcommadn, \renewcommand-->
-
-
-There are basically two reasons why you might want to use XeTeX instead of TeX: 1. XeTeX can directly utilize system fonts other than the fonts that are packaged specifically for TeX; 2. XeTeX assume Unicode (UTF-8 encoding) input by default, so inputing Chinese cannot be easier.
-
-**fontspec**
-
-The intergration of system fonts with TeX is achieved by package _fontspec_. General font selections are made through the following commands.
-
-    {% highlight tex %}
-    \fontspec [font feature] {font name}
-    \setmainfont [<font feature>] {<font name>} %% Roman/Serif font
-    \setsansfont [<font feature>] {<font name>} %% Sans-Serif is also known as Gothic font
-    \setmonofont [<font feature>] {<font name>} %% fixed-width
-    \newfontfamily <cmd> [font feature] {font name}
-    {% endhighlight %}    
-
-To mix CJK input with English input, we need to load a package
-   
-    {% highlight tex %}
-    \usepackage[BoldFontï¼ŒCJKnumbb] {xeCJK}
-    \setCJKmainfont{<CJK font name>}
-    {% endhighlight %}
diff --git a/blog/_posts/2012-05-20-reading-notes-of-chambers-r-book.md b/blog/_posts/2012-05-20-reading-notes-of-chambers-r-book.md
deleted file mode 100644
index abdf29a..0000000
--- a/blog/_posts/2012-05-20-reading-notes-of-chambers-r-book.md
+++ /dev/null
@@ -1,56 +0,0 @@
----
-layout: post
-title: "Reading notes of Chambers' R book: (Almost) everything is a function call"
-description: ""
-category: computing
-tags: [R, Functional programming]
----
-
-I am beginning to read John Chambers' R book, _Software of Data Analysis_. As the principle designer of _S_, probably no one is more qualified than John Chambers to talk about the inner mechanism of _R_. As an impatient reader as I am, I jumped directly to the most juicy section, called _How R Works_. It was an interesting read, and clarified a number of concepts that I only had quite vague ideas about previously. Now I am working on other chapters and I do recommend all ``intermediate'' level R users like me to read this book.
-
-**R is a lot like Functional PLs**
-
-Programming languages have paradigms. C is a procedural programming language and C++ is an object-oriented programming language. But there is a more eccentric but older programming paradigm, functional programming language. It is like Indie movies, having a small but loyal followings. S/R is strongly influenced by functional programming languages, like _Lisp_, from its early days. In essence, almost everything in R can be described as a function call to the evaluator. Even though we see C-style syntax, like assignment '<-', it is actually implemented by a call to the corresponding function \`<-\`, and then evaluating it. Here I am using the grave accent "`", which means I am quoting the semantic meaning of the string, rather than the acute accent "'", the literal meaning. 
-
-To borrow from Regexp, R mostly work as (function call + evaluator)*.
-
-**Occasionally R is ([constant, name, promise] + evaluator)***
-
-There are three main exceptions to the uniformity of R's working flow. So instead of evaluating a function call, the input to the evaluator could be a constant, like "1+2i", a name of an object, like "iris", or a promise, which is related the lazy loading mechanism in R.
-
-**What is a Call object?**
-
-I always find the concept of a "call" in R very unintuitive. A "call" is actually a verb, so it is the intermediate step from the input to the evaluator, which is an expression (often consist of a name of a function and its arguments), to the value returned by the evaluators. 
-
-All the arithmetic operations are implemented as a function. The most interesting case might be the negative numbers. They are actually a function call like this
-
-    {% highlight r %}
-    R> class(quote(-9))
-    [1] "call"
-    {% endhighlight %}
-
-We can get a Call object by quoting a function itself (instead of a function name, which will give us a Name object).
-
-    {% highlight r %}
-    R> class(`ls`)
-    [1] "function"
-    R> class(quote(ls))
-    [1] "name"
-    R> class(quote(ls()))   
-    [1] "call"
-    {% endhighlight %}
-
-**Different types of functions**
-
-As we see, functions are the building blocks of R. Apparently, they all belong to the R Function class, but actually there are two groups of them. One that are written in R, the other that are written in other languages, i.e., C/C++ and Fortran. They are of different R internal types.
-
-    {% highlight r %}
-    R> typeof(`ls`)  % ordinary functions written in R
-    [1] "closure"
-    R> typeof(`dim`) % Primitive function wirtten in lower-level langs
-    [1] "builtin"
-    R> typeof(`[<-`) % Most operators are of another type of Primitive functions
-    [1] "special"
-    {% endhighlight %}
-
-The mechanism of calling to R functions and Primitive functions are very different, especially in terms of *Lazy Evaluation*. Read the book if you want to delve into the details. 
diff --git a/blog/_posts/2012-05-20-review-chambers-r-book.md b/blog/_posts/2012-05-20-review-chambers-r-book.md
new file mode 100644
index 0000000..57b52ce
--- /dev/null
+++ b/blog/_posts/2012-05-20-review-chambers-r-book.md
@@ -0,0 +1,56 @@
+---
+layout: post
+title: "Chambers' R book: (Almost) everything is a function call"
+description: ""
+category: computing
+tags: [R, Functional programming]
+---
+
+I am beginning to read John Chambers' R book, _Software of Data Analysis_. As the principle designer of _S_, probably no one is more qualified than John Chambers to talk about the inner mechanism of _R_. As an impatient reader as I am, I jumped directly to the most juicy section, called _How R Works_. It was an interesting read, and clarified a number of concepts that I only had quite vague ideas about previously. Now I am working on other chapters and I do recommend all ``intermediate'' level R users like me to read this book.
+
+**R is a lot like Functional PLs**
+
+Programming languages have paradigms. C is a procedural programming language and C++ is an object-oriented programming language. But there is a more eccentric but older programming paradigm, functional programming language. It is like Indie movies, having a small but loyal followings. S/R is strongly influenced by functional programming languages, like _Lisp_, from its early days. In essence, almost everything in R can be described as a function call to the evaluator. Even though we see C-style syntax, like assignment '<-', it is actually implemented by a call to the corresponding function \`<-\`, and then evaluating it. Here I am using the grave accent "`", which means I am quoting the semantic meaning of the string, rather than the acute accent "'", the literal meaning. 
+
+To borrow from Regexp, R mostly work as (function call + evaluator)*.
+
+**Occasionally R is ([constant, name, promise] + evaluator)***
+
+There are three main exceptions to the uniformity of R's working flow. So instead of evaluating a function call, the input to the evaluator could be a constant, like "1+2i", a name of an object, like "iris", or a promise, which is related the lazy loading mechanism in R.
+
+**What is a Call object?**
+
+I always find the concept of a "call" in R very unintuitive. A "call" is actually a verb, so it is the intermediate step from the input to the evaluator, which is an expression (often consist of a name of a function and its arguments), to the value returned by the evaluators. 
+
+All the arithmetic operations are implemented as a function. The most interesting case might be the negative numbers. They are actually a function call like this
+
+    {% highlight r %}
+    R> class(quote(-9))
+    [1] "call"
+    {% endhighlight %}
+
+We can get a Call object by quoting a function itself (instead of a function name, which will give us a Name object).
+
+    {% highlight r %}
+    R> class(`ls`)
+    [1] "function"
+    R> class(quote(ls))
+    [1] "name"
+    R> class(quote(ls()))   
+    [1] "call"
+    {% endhighlight %}
+
+**Different types of functions**
+
+As we see, functions are the building blocks of R. Apparently, they all belong to the R Function class, but actually there are two groups of them. One that are written in R, the other that are written in other languages, i.e., C/C++ and Fortran. They are of different R internal types.
+
+    {% highlight r %}
+    R> typeof(`ls`)  % ordinary functions written in R
+    [1] "closure"
+    R> typeof(`dim`) % Primitive function wirtten in lower-level langs
+    [1] "builtin"
+    R> typeof(`[<-`) % Most operators are of another type of Primitive functions
+    [1] "special"
+    {% endhighlight %}
+
+The mechanism of calling to R functions and Primitive functions are very different, especially in terms of *Lazy Evaluation*. Read the book if you want to delve into the details. 
diff --git a/blog/_posts/2012-06-21-hadley-course-day-1.md b/blog/_posts/2012-06-21-hadley-course-day-1.md
deleted file mode 100644
index ff739e5..0000000
--- a/blog/_posts/2012-06-21-hadley-course-day-1.md
+++ /dev/null
@@ -1,71 +0,0 @@
----
-layout: post
-title: "Notes from Hadley's R course: Day 1"
-description: ""
-category: Programming
-tags: [R]
----
-
-
-Four common types of ATOMIC vector
-
-- logical
-- numeric
-- character
-- integer
-- complex
-- raw
-
-Regression design matrix
-
-- model=TRUE
-
-Stop R from converting results to a simpler form
-
-- drop=FALSE
-
-## Controlling Evaluation
-
-- substitute
-- deparse: expression => string
-- the use of deparse(substitute()) is common, like the labeling of variables in plotting
-- remember eval always comes with an Environment
-- eval and evalq
-- the magic of substiture(list(...))
-
-## First-order Funciton
-
-- match.fun()
-- environment can be thought as a list of objects
-    {% highlight r %}
-    f <- function(){x <- 1; function() 1}
-    g <- f()
-    as.list(environment(g)) {% endhighlight %}
-- differences between parent.frame() and parent.env()
-- When you look at closures, inspect their environment
-
-
-## Object Oriented
-
-- structure() to create a new class. All facilities need to be designed
-  yourself.
-- In S3/S4, methods are associated with generic functions, not classes. This is a major
-  main difference from common OO languages.
-- By default, NA is not a level in factor, but you can make it an extra level
-  with addNA().
-- Class Hierarchy in R in mostly implicit.
-
-## Best Design Practice
-
-- Avoid functions that have non-standard
-evaluation rules (no subset, with,
-transform).
-- Avoid functions that can have different
-types of output (sapply, always use drop =
-FALSE).
-- Be explicit about missings.
-- Debugging in batch-script mode
-
-    {% highlight r %}
-    options(error = quote({dump.frames(to.file = TRUE); q()}))
-    {% endhighlight %}
diff --git a/blog/_posts/2012-06-22-hadley-course-day-2.md b/blog/_posts/2012-06-22-hadley-course-day-2.md
deleted file mode 100644
index 983079a..0000000
--- a/blog/_posts/2012-06-22-hadley-course-day-2.md
+++ /dev/null
@@ -1,34 +0,0 @@
----
-layout: post
-title: "Notes from Hadley's R course: Day 2"
-description: ""
-category: Programming
-tags: [R]
----
-
-## Layout of R package source directory
-
-No that interesting. Chambers's book is a good reference, if we have no patience
-with *Writing R Extension*.
-
-## Package and Library
-
-- Set R_LIBS="~/R" v.s. .libPaths("~/R")
-- ?Startup to see details of R initialization
-- Upgrade R packages after upgrading R
-
-    {% highlight r %}
-    update.packages(checkBuilt = T, ask = F)   {% endhighlight %}
-
-## Documenting R packages with Roxygen2
-
-Work flow
-- Update rd comments in R source files
-- document("pkg/path")
-- check_doc("pkg/path")
-- show_rd(, "rd files")
-
-## Useful links
-
-- [Lexical Scoping of R](http://darrenjw.wordpress.com/2011/11/23/lexical-scope-and-function-closures-in-r/)
-- [Environments and Namespaces](http://obeautifulcode.com/R/How-R-Searches-And-Finds-Stuff/)
diff --git a/blog/_posts/2012-08-18-some-notes-on-latex-fonts.md b/blog/_posts/2012-08-18-some-notes-on-latex-fonts.md
deleted file mode 100644
index 4435265..0000000
--- a/blog/_posts/2012-08-18-some-notes-on-latex-fonts.md
+++ /dev/null
@@ -1,12 +0,0 @@
----
-layout: post
-title: "Some Notes on LaTeX Fonts"
-description: ""
-category: memo
-tags: [S4]
----
-
-
-Some notes on LaTeX fonts
-
-- To change the font size of a block in text mode, the family of commands \tiny \scriptsize \footnotesize \small \normalsize \large \huge can be used. Remember to enclose the entire block together with the command
diff --git a/blog/_posts/2012-08-20-set-up-ess.md b/blog/_posts/2012-08-20-set-up-ess.md
deleted file mode 100644
index 487ddb5..0000000
--- a/blog/_posts/2012-08-20-set-up-ess.md
+++ /dev/null
@@ -1,24 +0,0 @@
----
-layout: post
-title: "Emacs Speaks Statistics Setup"
-description: ""
-category: memo
-tags: [S4]
----
-
-The emacs mode that I use the most frequently is ESS. To keep myself on the
-bleeding edge of it, I monitor it from the github repository. However, I pull
-from the the source very rarely, so that whenever I pull after several months, I
-need to re-teach myself some of the fundamentals of ESS. This is not particularly
-efficient. So I use this post as a reminder.
-
-**Installation**
-
-This part used to confuse me. I went through the unnecessary unix compiling squence of 
-
-    make
-    make install
-
-to install a new version of ESS. But it turns out that installing ESS is as
-simple as making sure Emacs knows where to look for the newest Elisp script
-files. On a Mac, the default path is <code>/Application/Emacs.app/Contents/Resources/site-lisp/</code>. On a Linux, the default path is <code>/usr/share/emacs23/site-lisp/</code>. After updating the repository, we can check the version of ESS by <code>C-h k ess-version</code>.
diff --git a/blog/_posts/2012-11-27-unix-utilities-tips.md b/blog/_posts/2012-11-27-unix-utilities-tips.md
deleted file mode 100644
index 05b5cad..0000000
--- a/blog/_posts/2012-11-27-unix-utilities-tips.md
+++ /dev/null
@@ -1,35 +0,0 @@
----
-layout: post
-title: "Unix Utilities Tips"
-description: ""
-category: memo
-tags: [S4]
----
-
-Learning a programming language is like learning a real language, if you don't
-practice, you forget. I spent some time at various stages of the previous few
-years trying to become better at Unix Shell, but my tendency to wander around
-and try different things, to my chagrin, makes me a very inconsistent
-learner. In this entry, I try to record the essential Unix Shell command that I,
-from time to time, needed to google and relearn. Hopefully googling part will
-becoem obsolete from now on.
-
-##Processes
-
-    {% highlight bash %}
-    ## list all running processes
-    ps aux          #ps stands for process status
-    {% endhighlight  %}
-
-##sed
-                     
-    {% highlight bash %}
-    sed 7q .emacs   #display the first 7 lines of the file 
-    {% endhighlight %}
-
-##grep
-
-    {% highlight bash %}
-    ## grep recursively 
-    grep -r --include="*.el" ess-version ~/elisp 
-    {% endhighlight %}
diff --git a/blog/_posts/2012-12-17-meta-analysis.md b/blog/_posts/2012-12-17-meta-analysis.md
new file mode 100644
index 0000000..0bad1a3
--- /dev/null
+++ b/blog/_posts/2012-12-17-meta-analysis.md
@@ -0,0 +1,22 @@
+---
+layout: notebook
+title: "Meta-analysis and Heterogeneity"
+description: ""
+category: memo
+tags: [S4]
+---
+
+Meta-analysis is the synthesis of existing evidence to answer statistical questions. The most obvious advantage is that it increases sample size. However, the biggest obstacle in meta-analysis is the heterogeneity in the effects of different studies. Some of the studies might have significant results, while some might have non-significant results; and in a lot of cases, the existing evidences even point to opposite directions. In the presence of heterogeneity, there are conceptual and practical problems in "synthesizing" results from different studies. Ironically, this is exactly the situation where meta-analysis should lead us out of the mess.
+
+**Random Effects Models**
+
+ The common practice in meta-analysis in face of heterogeneity is using Random Effects Model, made popular by DerSimonian and Laird. <div> \\[\hat\theta(z,\tilde z;s)=\theta(z,\tilde z;s)+\varepsilon_s, \\] \\[ \theta(z, \tilde z;s)\stackrel{iid}{\sim} G(\theta(z, \tilde z), \cdot)\\] </div>
+
+From a Bayesian perspective, this is a multilevel model, and can be fitted using JAGS or Stan. Admittedly, most people are familiar with the frequentist point of view and call this a Random Effects model. DerSimonian and Laird gave a simple non-iterative method of estimating \\(\theta(z, \tilde z)\\), which is essentially a compromise between taking average of the effect estimates and a weighted mean of the effect estimates with the weights reciprocally proportional to sample sizes of the studies. Random Effects model is considered an improvement over the so-called fixed effects model (warning: here the fixed effects model is not the same as in the panel data literature), which considers the true effects of the studies are the same. Note that the fixed effects estimate is exactly the sample-size-weighted mean. So what most applied researchers do when conducting a meta-analysis is first perform a test of heterogeneity of the estimated effect sizes, and if heterogeneity exists, then go with the random effects model, otherwise, go with the fixed effects model.
+
+We feel uneasy with this standard practice. First, it is very common that the heterogeneity test is underpowered, such as when the number of trials is small or the events of interest are sparse. Second, in the presence of heterogeneity, we don't think brushing it off and throwing it in the bin known as the random effects tells us anything useful about the nature of the variability. Huge heterogeneity might undermine the relevance of the results of our analysis; and sometimes, the nature of the variation itself might be of substantive interest. 
+
+
+
+
+
diff --git a/blog/_posts/template.md b/blog/_posts/template.md
new file mode 100644
index 0000000..779e800
--- /dev/null
+++ b/blog/_posts/template.md
@@ -0,0 +1,32 @@
+---
+layout: post
+title: ""
+description: ""
+category: 
+tags: []
+---
+
+[This](http://cran.r-project.org/doc/contrib/Genolini-S4tutorialV0-5en.pdf) is a very helpful introduction/summary of S4 methods.  I often have memory failure when dealing with S4 methods. So I document the basic S4 utilities functions below.  MI is used as an example. This page has {{ page.content | number_of_words }} words.
+
+    {% highlight r linenos %}
+    ## Two most basic definition functions 
+    setClass("missing_data.frame", representation(...), prototype(), contains=FatherClass...)                                    
+    setGeneric(f="mi", def=function(var1, var2, ...) standardGeneric("mi"))                 
+
+    args(mi) # number of arguments for a Generic function                                             
+    setMethod("mi", signature(var1= , var2= ,...), def=function(...) ...)
+
+    ## To see slots names
+    slotNames("mi")
+    getSlots("mi")
+    getClass("mi")
+
+    ## see methods 
+    showMethods(f="mi") # all possible methods for Generic mi
+    showMethods(classess="mi") # all possible methods for class mi
+    getMethods(f="mi", signature(...))
+
+    ## VIRTUAL classes, Registered old-style S3 classes, an example from MI
+    setOldClass("data.frame")
+    setClass("missing_data.frame",  representation(...), contains = "data.frame")
+    {% endhighlight  %}
diff --git a/css/wei.css b/css/wei.css
index 231763c..672bb27 100644
--- a/css/wei.css
+++ b/css/wei.css
@@ -211,6 +211,41 @@ blockquote {
     margin-bottom: 3em;
 }
 
+/* pages listing notbook posts */
+
+#notbookindex {
+    width: 30em;
+    margin: 2em auto 2em auto;
+}
+#notbookindex ul {
+    margin: 0 2.5em 0 1em;
+}
+#notbookindex ul.posts {
+    list-style-type: none;
+}
+#notbookindex ul.posts li {
+    line-height: 1.75em;
+    margin: 0;
+}
+/*#notbookindex ul.posts .timestamp {
+    float: right;
+    color: #aaa;
+}*/
+
+/* notbook post pages */
+
+#notbookpost {
+    margin-bottom: 3em;
+}
+/* #notbookpost .timestamp {
+    color: #aaa;
+}*/
+
+#trackbacks {
+    margin-bottom: 3em;
+}
+
+
 /* disqus comment threads */
 
 #disqus_thread {
diff --git a/index.md b/index.md
index 225b6dd..b1244fd 100644
--- a/index.md
+++ b/index.md
@@ -5,10 +5,8 @@ tagline:
 ---
 
 <p>I am a fourth year PhD student at <a href="http://stat.columbia.edu">Department of Statistics</a>, Columbia University. I am interested in Missing Data Imputation, Causal Inference, Model Assessment and Statistical Computation. I received my Bachler of Science degree in 2009 from <a href="http://en.ustc.edu.cn/">University of Science and Technology of China</a>. </p>
+<p><a href="./CV_WeiWang.pdf">[CV]</a></p>
 <div id="contact">
 <img src="figures/me.jpg" width="150" height="209" />
-<ul>
-	<li>Me after finishing the 2011 New York City Marathon, skinner than usual. An authentic photo would cost me 70 bucks, which is rediculous. That's why you see a watermarked version. </li>
-</ul></p>
 </div>
 
diff --git a/notebooks/_posts/2000-01-01-hadley-master-class-notes.md b/notebooks/_posts/2000-01-01-hadley-master-class-notes.md
new file mode 100644
index 0000000..74c39b1
--- /dev/null
+++ b/notebooks/_posts/2000-01-01-hadley-master-class-notes.md
@@ -0,0 +1,95 @@
+---
+layout: notebook
+title: "Notes from Hadley's R course, 6/21/12-6/22/12"
+description: ""
+category: Programming
+tags: [R]
+---
+Four common types of ATOMIC vector
+
+- logical
+- numeric
+- character
+- integer
+
+
+Regression design matrix
+
+- model=TRUE
+
+Stop R from converting results to a simpler form
+
+- drop=FALSE
+
+** Controlling Evaluation **
+
+- substitute
+- deparse: expression => string
+- the use of deparse(substitute()) is common, like the labeling of variables in plotting
+- remember eval always comes with an Environment
+- eval and evalq
+- the magic of substiture(list(...))
+
+** First-order Funciton **
+
+- match.fun()
+- environment can be thought as a list of objects
+    {% highlight r %}
+    f <- function(){x <- 1; function() 1}
+    g <- f()
+    as.list(environment(g)) {% endhighlight %}
+- differences between parent.frame() and parent.env()
+- When you look at closures, inspect their environment
+
+
+** Object Oriented **
+
+- structure() to create a new class. All facilities need to be designed
+  yourself.
+- In S3/S4, methods are associated with generic functions, not classes. This is a major
+  main difference from common OO languages.
+- By default, NA is not a level in factor, but you can make it an extra level
+  with addNA().
+- Class Hierarchy in R in mostly implicit.
+
+** Best Design Practice **
+
+- Avoid functions that have non-standard
+evaluation rules (no subset, with,
+transform).
+- Avoid functions that can have different
+types of output (sapply, always use drop =
+FALSE).
+- Be explicit about missings.
+- Debugging in batch-script mode
+
+    {% highlight r %}
+    options(error = quote({dump.frames(to.file = TRUE); q()}))
+    {% endhighlight %}
+
+** Layout of R package source directory **
+
+No that interesting. Chambers's book is a good reference, if we have no patience
+with *Writing R Extension*.
+
+** Package and Library **
+
+- Set R_LIBS="~/R" v.s. .libPaths("~/R")
+- ?Startup to see details of R initialization
+- Upgrade R packages after upgrading R
+
+    {% highlight r %}
+    update.packages(checkBuilt = T, ask = F)   {% endhighlight %}
+
+** Documenting R packages with Roxygen2 **
+
+Work flow
+- Update rd comments in R source files
+- document("pkg/path")
+- check_doc("pkg/path")
+- show_rd(, "rd files")
+
+** Useful link **
+
+- [Lexical Scoping of R](http://darrenjw.wordpress.com/2011/11/23/lexical-scope-and-function-closures-in-r/)
+- [Environments and Namespaces](http://obeautifulcode.com/R/How-R-Searches-And-Finds-Stuff/)
diff --git a/notebooks/_posts/2000-01-01-r-data-import-export.md b/notebooks/_posts/2000-01-01-r-data-import-export.md
new file mode 100644
index 0000000..86febfb
--- /dev/null
+++ b/notebooks/_posts/2000-01-01-r-data-import-export.md
@@ -0,0 +1,31 @@
+---
+layout: notebook
+title: "R Data Import/Export"
+description: ""
+category:
+tags: [XeTex]
+---
+
+<!--Some ideas: functions I want to talk about cat, scan, sink, file, open, close, pipe, dump, serialize-->
+
+
+There are basically two reasons why you might want to use XeTeX instead of TeX: 1. XeTeX can directly utilize system fonts other than the fonts that are packaged specifically for TeX; 2. XeTeX assume Unicode (UTF-8 encoding) input by default, so inputing Chinese cannot be easier.
+
+**fontspec**
+
+The intergration of system fonts with TeX is achieved by package _fontspec_. General font selections are made through the following commands.
+
+    {% highlight tex %}
+    \fontspec [font feature] {font name}
+    \setmainfont [<font feature>] {<font name>} %% Roman/Serif font
+    \setsansfont [<font feature>] {<font name>} %% Sans-Serif is also known as Gothic font
+    \setmonofont [<font feature>] {<font name>} %% fixed-width
+    \newfontfamily <cmd> [font feature] {font name}
+    {% endhighlight %}    
+
+To mix CJK input with English input, we need to load a package
+   
+    {% highlight tex %}
+    \usepackage[BoldFontï¼ŒCJKnumbb] {xeCJK}
+    \setCJKmainfont{<CJK font name>}
+    {% endhighlight %}
diff --git a/notebooks/_posts/2000-01-01-s4.md b/notebooks/_posts/2000-01-01-s4.md
new file mode 100644
index 0000000..1afc7ce
--- /dev/null
+++ b/notebooks/_posts/2000-01-01-s4.md
@@ -0,0 +1,32 @@
+---
+layout: notebook
+title: "S4 Objects of R"
+description: ""
+category: memo
+tags: [S4]
+---
+
+[This](http://cran.r-project.org/doc/contrib/Genolini-S4tutorialV0-5en.pdf) is a very helpful introduction/summary of S4 methods.  I often have memory failure when dealing with S4 methods. So I document the basic S4 utilities functions below.  MI is used as an example. This page has {{ page.content | number_of_words }} words.
+
+    {% highlight r linenos %}
+    ## Two most basic definition functions 
+    setClass("missing_data.frame", representation(...), prototype(), contains=FatherClass...)                                    
+    setGeneric(f="mi", def=function(var1, var2, ...) standardGeneric("mi"))                 
+
+    args(mi) # number of arguments for a Generic function                                             
+    setMethod("mi", signature(var1= , var2= ,...), def=function(...) ...)
+
+    ## To see slots names
+    slotNames("mi")
+    getSlots("mi")
+    getClass("mi")
+
+    ## see methods 
+    showMethods(f="mi") # all possible methods for Generic mi
+    showMethods(classess="mi") # all possible methods for class mi
+    getMethods(f="mi", signature(...))
+
+    ## VIRTUAL classes, Registered old-style S3 classes, an example from MI
+    setOldClass("data.frame")
+    setClass("missing_data.frame",  representation(...), contains = "data.frame")
+    {% endhighlight  %}
diff --git a/notebooks/_posts/2000-01-01-xetex.md b/notebooks/_posts/2000-01-01-xetex.md
new file mode 100644
index 0000000..08ad456
--- /dev/null
+++ b/notebooks/_posts/2000-01-01-xetex.md
@@ -0,0 +1,31 @@
+---
+layout: notebook
+title: "XeLaTex"
+description: ""
+category:
+tags: [XeTex]
+---
+
+<!--Some ideas: kpsexpand, add-hook, lambda(), differences between emacs variables commands function, \newcommadn, \renewcommand-->
+
+
+There are basically two reasons why you might want to use XeTeX instead of TeX: 1. XeTeX can directly utilize system fonts other than the fonts that are packaged specifically for TeX; 2. XeTeX assume Unicode (UTF-8 encoding) input by default, so inputing Chinese cannot be easier.
+
+**fontspec**
+
+The intergration of system fonts with TeX is achieved by package _fontspec_. General font selections are made through the following commands.
+
+    {% highlight tex %}
+    \fontspec [font feature] {font name}
+    \setmainfont [<font feature>] {<font name>} %% Roman/Serif font
+    \setsansfont [<font feature>] {<font name>} %% Sans-Serif is also known as Gothic font
+    \setmonofont [<font feature>] {<font name>} %% fixed-width
+    \newfontfamily <cmd> [font feature] {font name}
+    {% endhighlight %}    
+
+To mix CJK input with English input, we need to load a package
+   
+    {% highlight tex %}
+    \usepackage[BoldFontï¼ŒCJKnumbb] {xeCJK}
+    \setCJKmainfont{<CJK font name>}
+    {% endhighlight %}
diff --git a/notebooks/_posts/2012-08-20-Emacs-Speaks-Statisitcs.md b/notebooks/_posts/2012-08-20-Emacs-Speaks-Statisitcs.md
new file mode 100644
index 0000000..e8c7eb6
--- /dev/null
+++ b/notebooks/_posts/2012-08-20-Emacs-Speaks-Statisitcs.md
@@ -0,0 +1,32 @@
+---
+layout: notebook
+title: "Emacs Speaks Statistics"
+description: ""
+category: memo
+tags: [S4]
+---
+
+The emacs mode that I use the most frequently is ESS. To keep myself on the
+bleeding edge of it, I watch its github repository. However, I pull
+from the the source very rarely, so that whenever I pull after several months, I
+need to re-teach myself some of the fundamentals of ESS. This is not particularly
+efficient. So I use this post as a reminder.
+
+**Installation**
+
+This part used to confuse me. I went through the standard unix compiling sequence of 
+
+    make
+    make install
+
+to install a new version of ESS. However, the laziest way to install ESS doesn't
+require any compilation at all. I still cannot wrap my head around this whole
+compiled elisp thing, but my impression is that script lisp codes reside in files
+that end with .el and compiled elisp codes reside in files that end with .elc;
+And the main difference is speed. As for an ordinary user like me, sticking to
+the laziest way is enough. The key is to know where the ESS/ folder should live
+by default in the system. On a Mac, the default path is
+<code>/Application/Emacs.app/Contents/Resources/site-lisp/</code>. On a Linux,
+the default path is <code>/usr/share/emacs23/site-lisp/</code>. After updating
+the repository, we can check the version of ESS by <code>C-h v
+ess-version</code>.
diff --git a/notebooks/index.md b/notebooks/index.md
new file mode 100644
index 0000000..e67ef8a
--- /dev/null
+++ b/notebooks/index.md
@@ -0,0 +1,15 @@
+---
+layout: default
+title:  Wang, Wei's Notebook
+---
+<div id="notebookindex">
+  <p>Good memory is less reliable than bare pencils.</p>
+
+  <ul class="posts">
+    {% for post in site.categories.notebooks %}
+      <li>
+        <a class="postlink" href="{{ post.url }}">{{ post.title }}</a>
+      </li>
+    {% endfor %}
+  </ul>
+</div>
diff --git a/pages.html b/pages.html
deleted file mode 100644
index bde1a32..0000000
--- a/pages.html
+++ /dev/null
@@ -1,13 +0,0 @@
----
-layout: page
-title: Pages 
-header: Pages
-group: navigation
----
-{% include JB/setup %}
-
-<h2>All Pages</h2>
-<ul>
-{% assign pages_list = site.pages %}
-{% include JB/pages_list %}
-</ul>
diff --git a/research/index.md b/research/index.md
new file mode 100644
index 0000000..f50fa4b
--- /dev/null
+++ b/research/index.md
@@ -0,0 +1,11 @@
+---
+layout: research
+title:  Wang, Wei's Research
+---
+
+My research interests concern applications of Hierarchical models in missing data imputation and causal inference, under various applied settings such as big national opinion surveys, meta-analysis and randomized program evaluations.
+
+- _Wei Wang_ and Andrew Gelman. Model selection via Cross-Validation: Challenges from Structured Data.
+- _Wei Wang_, Ben Goodrich, Jonathan Kropko and Andrew Gelman. Iterative Conditional Imputation of Time-Series Cross-Section Data.
+- Michael Sobel, _Wei Wang_ and David Madigan. A Potential-Outcome Framework for Meta-Analysis.
+- Aira Toivgoo, _Wei Wang_ and Susan Witte. Reducing Risk Behaviors linked to Non Communicable Diseases in Mongolia: A randomized controlled trial.
diff --git a/teaching/index.md b/teaching/index.md
index c46c533..38a0899 100644
--- a/teaching/index.md
+++ b/teaching/index.md
@@ -2,16 +2,16 @@
 layout: teaching
 title:  Wang, Wei's Teaching Page
 ---
-As Instructor
+As the Instructor
 
 - [STAT W1211](/teaching/w1211_2012) Introduction to Statistics with Calculus, Fall 2012
 - [STAT S1211Q](/teaching/s1211q_2012) Introduction to Statistics with Calculus, Summer 2012             
 
-As Teaching Assistant
+As a Teaching Assistant
 
-- STAT W4325 Generalized Linear Models, Spring 2012
-- STAT G6240/W4240 Data Mining, Fall 2011
-- STAT W3107 Introduction to Statistical Inference, Spring 2011
-- STAT W4315 Linear Regression Models, Fall 2010
-- STAT W4330 Multilevel Models, Spring 2010
-- STAT W1211 Introduction to Statistics with Calculus, Fall 2009
+- STAT W4325 _Generalized Linear Models_, Spring 2012
+- STAT G6240/W4240 _Data Mining_, Fall 2011
+- STAT W3107 _Introduction to Statistical Inference_, Spring 2011
+- STAT W4315 _Linear Regression Models_, Fall 2010
+- STAT W4330 _Multilevel Models_, Spring 2010
+- STAT W1211 _Introduction to Statistics with Calculus_, Fall 2009
diff --git a/teaching/w1211_2012/index.md b/teaching/w1211_2012/index.md
index e3fd6f9..aaf148b 100644
--- a/teaching/w1211_2012/index.md
+++ b/teaching/w1211_2012/index.md
@@ -12,7 +12,9 @@ W1211 Introduction to Statistics with Calculus, Fall 2012
 
   Intro, R and RStudio Setup
 
-  <font color="red">Homework 0: Install [R](http://cran.r-project.org/) and [RStudio](http://rstudio.org/download/desktop)</font>
+  
+  Homework 0: Install [R](http://cran.r-project.org/) and [RStudio](http://rstudio.org/download/desktop)
+  
 
 - [Lecture 2](./lecture2.pdf), [R Demo Code](./r_demo_2.R), Sep 10th
 
@@ -26,9 +28,8 @@ W1211 Introduction to Statistics with Calculus, Fall 2012
 
   Textbook sections covered: 1.4, 2.1, 2.2
 
-  <font color="red">
+  
   Homework 1:
-
   1.24 means exercise problem 24 in chapter 1.
   - 1.24 (Histogram) Note: Construct a density histogram instead of a relative frequency histogram.
   - 1.36, 1.38 (Measure of Location);
@@ -37,7 +38,7 @@ W1211 Introduction to Statistics with Calculus, Fall 2012
   - 2.11, 2.26 (Probability);
   - [Accompanying R codes](./r_code_hw1.R)
   - [Solutions](./HW_1_solutions.pdf)
-  </font>
+  
 
   Due on Wed Sep 19^th.
 
@@ -53,14 +54,14 @@ W1211 Introduction to Statistics with Calculus, Fall 2012
 
   Textbook sections covered: 2.4
 
-  <font color="red">
+  
   Homework 2:
 
   - 2.29, 2.38 (Counting);
   - 2.45, 2.56, 2.59, 2.60 (Conditional Probability)
   - 2,74, 2.78 (Independence);
   - [Solutions](./HW_2_solutions.pdf)
-  </font>
+  
 
   Due on Mon Oct 1^st
 
@@ -76,13 +77,13 @@ W1211 Introduction to Statistics with Calculus, Fall 2012
 
   Textbook sections covered: 3.3
 
-  <font color="red">
+  
   Homework 3:
 
   - 3.10, 3.14, 3.19, 3.24 (Discrete RVs and Distributions);
   - 3.30, 3.39 (Expectation and Variance);
   - [Solutions](./HW_3_solutions.pdf)
-  </font>
+  
 
   Due on Wed Oct 3^rd
 
@@ -98,14 +99,14 @@ W1211 Introduction to Statistics with Calculus, Fall 2012
 
   Textbook sections covered: 3.5, 3.6
 
-  <font color="red">
+  
   Homework 4:
 
   - 3.47a,b,f,g; 3.49; 3.50; 3.58 (Binomial Distribution);
   - 3.68 (Hypergeometric Distribution);
   - 3.81, 3.86 (Poisson Distribution)
   - [Solutions](./HW4_solutions.pdf)
-  </font>
+  
 
   Due on Wed Oct 10^th
 
@@ -121,7 +122,7 @@ W1211 Introduction to Statistics with Calculus, Fall 2012
 
   Textbook sections covered: 4.3, 4.4, 4.6
 
-  <font color="red">
+  
   Homework 5:
 
   - 4.4, 4.5 (Continuous Distribution);
@@ -130,7 +131,7 @@ W1211 Introduction to Statistics with Calculus, Fall 2012
   - 4.60, 4.70 (Exponential Distribution);
   - 4.88 (Normal Probability Plot)
   - [Solutions](./HW5_solutions.pdf)
-  </font>
+  
 
   Due on Wed Oct 17^th
 
@@ -146,7 +147,7 @@ W1211 Introduction to Statistics with Calculus, Fall 2012
 
   Textbook sections covered: 5.2
 
-  <font color="red"> Midterm Practice Problems: 2.38, 2.63, 2.93, 2.101, 3.52, 3.80, 3.97, 4.28, 4.29, 4.105, 4.106, 5.22 [Solutions](./midterm_practice_solutions.pdf)</font>
+   Midterm Practice Problems: 2.38, 2.63, 2.93, 2.101, 3.52, 3.80, 3.97, 4.28, 4.29, 4.105, 4.106, 5.22 [Solutions](./midterm_practice_solutions.pdf)
 
 
 - [Lecture 14](./lecture14.pdf), Oct 22^nd
@@ -165,14 +166,14 @@ W1211 Introduction to Statistics with Calculus, Fall 2012
 
   Textbook sections covered: 5.3 (sans Simulation Experiments), 5.4, 5.5
 
-  <font color="red">
+  
   Homework 6:
 
   - 5.41 (Sampling Distributions)
   - 5.46, 5.50, 5.53 (Distribution of Sample Means)
   - 5.60 (Distribution of Linear Combinations)
   - [Solutions](./HW6_solutions.pdf)
-  </font>
+  
 
   Due on Wed Nov 7^th
 
@@ -182,13 +183,13 @@ W1211 Introduction to Statistics with Calculus, Fall 2012
 
   Textbook sections covered: 6.1
 
-  <font color="red">
+  
   Homework 7:
 
   - 6.3, 6.4, 6.5 (Estimators)
   - 6.11, 6.15 (Measure of Good Estimators)
   - [Solutions](./HW7_solutions.pdf)
-  </font>
+  
 
   Due on Wed Nov 14^th
 
@@ -204,13 +205,13 @@ W1211 Introduction to Statistics with Calculus, Fall 2012
 
   Textbook sections covered: 6.2 (sans The Method of Moments)
 
-  <font color="red">
+  
   Homework 8:
 
   - 6.28a (Maximum Likelihood Estimator)
   - 7.3; 7.4a,c,e; 7.6 (Confidence Interval)
   - [solutions](./HW8_solutions.pdf)
-  </font>
+  
 
   Due on Mon Nov 26^th
 
@@ -226,7 +227,7 @@ W1211 Introduction to Statistics with Calculus, Fall 2012
 
   Textbook sections covered: 7.2
 
-  <font color="red">
+  
   Homework 9:
 
   - 7.13, 7.18 (Large-Sample Confidence Interval for a Population Mean)
@@ -234,7 +235,7 @@ W1211 Introduction to Statistics with Calculus, Fall 2012
   - 7.30a,b,c; 7.33; 7.37a (Confidence Intervals based on t Distribution)
   - 8.2a,b,c,d (Hypothesis)
   - [Solutions](./HW9_solutions.pdf)
-  </font>
+  
 
   Due on Mon Dec 3^rd
 
@@ -256,7 +257,7 @@ W1211 Introduction to Statistics with Calculus, Fall 2012
 
   Textbook sections covered: 8.2, 8.3
 
-  <font color="red">
+  
   Homework 10:
 
   - 8.6 (Hypothesis and Errors)
@@ -264,7 +265,7 @@ W1211 Introduction to Statistics with Calculus, Fall 2012
   - 8.37, 8.39 (Testing Population Proportion)
   - 8.71, 8.76 (P-value)
   - [Solutions](./HW10_solutions.pdf)
-  </font>
+  
 
   Due on Mon Dec 10^th  
 
@@ -274,7 +275,7 @@ W1211 Introduction to Statistics with Calculus, Fall 2012
 
   Textbook sections covered: 8.3, 8.4
 
-  <font color="red">       
+         
   Final Practice Problems: 
   
   - 3.50, 3.81, 4.45, 4.47
@@ -284,7 +285,7 @@ W1211 Introduction to Statistics with Calculus, Fall 2012
   - 8.58, 8.75 and 8.26, 8.37
   - [Solutions](./final_prac_solutions.pdf)
   - [Quiz 2](./quiz2.pdf)
-</font>  
+  
 
 - Lecture 27, Dec 10th
 
